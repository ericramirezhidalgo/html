---

---

<p
    id="points"
    class="justify-center p-2 m-2 mx-auto w-fit rounded-md border-2 font-mono border-yellow-400 bg-blue-800 text-yellow-300
font-bold text-sx"
>
    POINTS:
</p>

<div class="justify-center w-auto p-2 m-2 items-center">
    <canvas
        class="border-t-4 border-r-4 border-l-4 border-white mx-auto block bg-center bg-cover"
        style="background-image: url('/public/images/bkg.png');"
    >
    </canvas>
</div>

<img hidden id="sprites" src="/public/images/sprite.png" alt="Paddle" />
<img hidden id="bricks" src="/public/images/bricks.png" alt="Bricks" />
<img
    hidden
    id="ballSprite"
    src="/public/images/Ball_Blue_Glass-32x32.png"
    alt="Ball"
/>

<script>
    window.addEventListener("DOMContentLoaded", (event) => {
        const canvas = document.querySelector("canvas");
        if (canvas) {
            const ctx = canvas.getContext("2d");

            let totalPoints = 0;

            let $points = document.querySelector("#points");
            const $sprite = document.querySelector(
                "#sprites",
            ) as CanvasImageSource;
            const $bricks = document.querySelector(
                "#bricks",
            ) as CanvasImageSource;
            const $ballSprite = document.querySelector(
                "#ballSprite",
            ) as CanvasImageSource;
            canvas.width = 448;
            canvas.height = 400;

            let x = canvas.width / 2;
            let y = canvas.height - 30;

            let dx = -3;
            let dy = -3;

            const paddleHeight = 10;
            const paddleWidth = 50;

            let paddleX = (canvas.width - paddleWidth) / 2;
            let paddleY = canvas.height - paddleHeight - 10;

            let rightPressed = false;
            let leftPressed = false;

            const brickRowCount = 6;
            const brickColumnCount = 13;
            const brickWidth = 32;
            const brickHeight = 16;
            const brickPadding = 0;
            const brickOffsetTop = 80;
            const brickOffsetLeft = 16;
            const bricks: {
                x: number;
                y: number;
                status: number;
                color: number;
            }[][] = [];

            const BRICK_STATUS = {
                ACTIVE: 1,
                DESTROYED: 0,
            };

            for (let c = 0; c < brickColumnCount; c++) {
                bricks[c] = [];
                for (let r = 0; r < brickRowCount; r++) {
                    const brickX =
                        c * (brickWidth + brickPadding) + brickOffsetLeft;
                    const brickY =
                        r * (brickHeight + brickPadding) + brickOffsetTop;
                    const random = Math.floor(Math.random() * 8);
                    bricks[c][r] = {
                        x: brickX,
                        y: brickY,
                        status: BRICK_STATUS.ACTIVE,
                        color: random,
                    };
                }
            }

            const PADDLE_SENSITIVITY = 8;

            const ballRadius = 4;

            function drawBall() {
                if (ctx) {
                    ctx.drawImage(
                        $ballSprite,
                        x - ballRadius,
                        y - ballRadius,
                        ballRadius * 2,
                        ballRadius * 2,
                    );
                }
            }

            function drawPaddle() {
                if (ctx) {
                    ctx.fillStyle = "red";
                    ctx.drawImage(
                        $sprite,
                        29,
                        174,
                        paddleWidth,
                        paddleHeight,
                        paddleX,
                        paddleY,
                        paddleWidth,
                        paddleHeight,
                    );
                }
            }
            function drawBricks() {
                for (let c = 0; c < brickColumnCount; c++) {
                    for (let r = 0; r < brickRowCount; r++) {
                        const currentBrick = bricks[c][r];
                        if (currentBrick.status === BRICK_STATUS.DESTROYED)
                            continue;
                        if (ctx) {
                            const clipX = currentBrick.color * 32;
                            ctx.drawImage(
                                $bricks,
                                clipX,
                                0,
                                31,
                                14,
                                currentBrick.x,
                                currentBrick.y,
                                brickWidth,
                                brickHeight,
                            );
                        }
                    }
                }
            }
            function collisionDetection() {
                for (let c = 0; c < brickColumnCount; c++) {
                    for (let r = 0; r < brickRowCount; r++) {
                        const currentBrick = bricks[c][r];
                        if (currentBrick.status === BRICK_STATUS.DESTROYED)
                            continue;
                        {
                            const isBallSameXAsBrick =
                                x > currentBrick.x &&
                                x < currentBrick.x + brickWidth;
                            const isBallSameYAsBrick =
                                y > currentBrick.y &&
                                y < currentBrick.y + brickHeight;
                            if (isBallSameXAsBrick && isBallSameYAsBrick) {
                                dy = -dy;
                                currentBrick.status = BRICK_STATUS.DESTROYED;
                                let newPoints = points(1);
                                if ($points) {
                                    $points.textContent =
                                        "POINTS: " + newPoints;
                                }
                            }
                        }
                    }
                }
            }
            function ballMovement() {
                if (x + dx > 448 - ballRadius || x + dx < ballRadius) {
                    dx = -dx;
                }
                x += dx;
                y += dy;

                if (y + dy < ballRadius) {
                    dy = -dy;
                }
                const isBallSameXAsPaddle =
                    x > paddleX && x < paddleX + paddleWidth;
                const isBallTouchingPaddle = y + dy > paddleY;
                if (isBallSameXAsPaddle && isBallTouchingPaddle) {
                    dy = -dy;
                } else if (y + dy > 400 - ballRadius) {
                    console.log("Game Over");
                    document.location.reload();
                }
            }
            function paddleMovement() {
                if (rightPressed && paddleX < 448 - paddleWidth) {
                    paddleX += PADDLE_SENSITIVITY;
                } else if (leftPressed && paddleX > 0) {
                    paddleX -= PADDLE_SENSITIVITY;
                }
            }
            function cleanCanvas() {
                ctx?.clearRect(0, 0, 448, 400);
            }
            function keyDownHandler(event: KeyboardEvent) {
                const { key } = event;
                if (key === "Right" || key === "ArrowRight") {
                    rightPressed = true;
                } else if (key === "Left" || key === "ArrowLeft") {
                    leftPressed = true;
                }
            }

            function keyUpHandler(event: KeyboardEvent) {
                const { key } = event;
                if (key === "Right" || key === "ArrowRight") {
                    rightPressed = false;
                } else if (key === "Left" || key === "ArrowLeft") {
                    leftPressed = false;
                }
            }
            function points(points: number) {
                totalPoints += points;
                return totalPoints;
            }
            function initEvents() {
                document.addEventListener("keydown", keyDownHandler);
                document.addEventListener("keyup", keyUpHandler);
            }

            function draw() {
                cleanCanvas();
                drawBall();
                drawPaddle();
                drawBricks();

                collisionDetection();
                ballMovement();
                paddleMovement();
                window.requestAnimationFrame(draw);
            }
            draw();
            initEvents();
        }
    });
</script>
