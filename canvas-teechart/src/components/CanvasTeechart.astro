---
interface Props {
    data?: number[];
    title: string;
    id: string;
    width: string;
    height: string;
    labels?: string[];
}

const { data, title, id, width, height, labels } = Astro.props;
---

<body>
    <div class="flex justify-center mx-auto">
        <div
            class="w-auto h-auto p-2 m-5 mr-2 border-4 border-l-4 border-white rounded-lg block mx-auto"
        >
            <canvas
                id={id}
                width={width}
                height={height}
                data-values={JSON.stringify(data)}
                title-values={title}
                id-values={id}
                labels-values={JSON.stringify(labels)}
            >
            </canvas>
        </div>
    </div>
    <script
        src="https://www.steema.com/files/public/teechart/html5/latest/src/teechart.js"
        type="text/javascript"></script>
    <script>
        declare var Tee: any;
        window.addEventListener("DOMContentLoaded", (event) => {
            const chartData: { id: string; data: number[] }[] = [
                {
                    id: "line1",
                    data: [738, 812, 712, 921, 604, 800, 1024, 1203, 1100],
                },
                {
                    id: "line2",
                    data: [238, 612, 512, 221, 1004, 1220, 1524, 1003, 1100],
                },
                {
                    id: "line3",
                    data: [
                        2042, 1994, 1801, 1730, 1601, 1498, 1339, 1245, 1004,
                    ],
                },
                { id: "line4", data: [100, 79, 78, 27, 106, 115, 94, 93, 99] },
            ];

            function drawChart(
                selector: string,
                seriesClass: new () => any,
                customConfig: (chart: any, series: any) => void,
            ) {
                const elements = document.querySelectorAll(selector);
                elements.forEach((el) => {
                    const dataValues = el.getAttribute("data-values");
                    const title = el.getAttribute("title-values");
                    const id = el.getAttribute("id-values");
                    const labelsValues = el.getAttribute("labels-values");

                    if (dataValues && id) {
                        const chart = new Tee.Chart(id);
                        const series = new seriesClass();
                        series.data.values = JSON.parse(dataValues);
                        chart.addSeries(series);
                        chart.title.text = title || "";

                        chart.applyTheme("minimal");

                        if (labelsValues) {
                            const labels = JSON.parse(labelsValues);
                            for (
                                let i = 0;
                                i < series.data.values.length;
                                i++
                            ) {
                                series.data.labels[i] =
                                    labels[i % labels.length];
                            }
                        }

                        if (customConfig) customConfig(chart, series);

                        chart.draw();
                    }
                });
            }

            function drawLine(chartData: { id: string; data: number[] }[]) {
                const canvas = document.getElementById(
                    "lineChart",
                ) as HTMLCanvasElement;
                if (canvas) {
                    const lineChart = new Tee.Chart("lineChart");
                    chartData.forEach((line, i) => {
                        const lineSeries = new Tee.Line();
                        lineSeries.format.stroke.size = 3;
                        lineSeries.data.values = line.data;
                        lineSeries.format.stroke.fill =
                            i === 2 ? "red" : "green";
                        lineChart.addSeries(lineSeries);
                    });
                    lineChart.legend.visible = false;
                    lineChart.axes.visible = false;
                    lineChart.applyTheme("minimal");
                    lineChart.title.text = "Total Sales";
                    lineChart.title.format.fill = "black";
                    lineChart.title.format.align = "left";
                    lineChart.title.format.size = 20;
                    lineChart.draw();
                }
            }

            drawChart("canvas[id^='area']", Tee.Area, (chart, series) => {
                series.format.fill = "blue";
                series.smooth = true;
            });

            drawChart("canvas[id^='donut']", Tee.Donut, (chart, series) => {
                series.rotation = -30;
                series.marks.visible = false;
                chart.series.items[0].explode = [0, 30, 0, 0, 0];
                chart.legend.visible = true;
                chart.legend.position = "right";
                chart.legend.format.font.fill = "black";
                chart.legend.format.font.size = 14;

                const tooltip = new Tee.ToolTip(chart);
                tooltip.autoHide = true;
                tooltip.delay = 1000;
                tooltip.animated = 200;
                tooltip.findPoint = true;
                chart.tools.add(tooltip);
            });

            drawChart("canvas[id^='bar']", Tee.Bar, (chart, series) => {
                series.format.stroke.size = 3;
                series.format.gradient = false;
                series.marks.visible = false;
                chart.legend.visible = false;

                const tooltip = new Tee.ToolTip(chart);
                tooltip.autoHide = true;
                tooltip.delay = 1000;
                tooltip.animated = 200;
                tooltip.findPoint = true;
                chart.tools.add(tooltip);
            });

            drawLine(chartData);
        });
    </script>
</body>
