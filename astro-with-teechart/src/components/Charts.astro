<body onload="initializePage()"></body>
<div class="flex justify-center">
  <div
    class="bg-gray-100 mt-28 ml-10 pt-2 p-5 mb-10 h-auto w-1/2 rounded-md flex flex-wrap justify-around"
  >
    <div class="w-full flex justify-around">
      <canvas id="bar" width="600" height="300" class="rounded-lg m-1"></canvas>
    </div>
  </div>

  <div
    class="bg-gray-100 mt-28 ml-10 pt-2 p-10 mb-10 h-auto w-1/3 rounded-md flex flex-wrap justify-around"
  >
    <div class="w-full flex justify-around">
      <canvas id="line1" width="200" height="200" class="rounded-lg m-1"
      ></canvas>
      <canvas id="line2" width="200" height="200" class="rounded-lg m-1"
      ></canvas>
    </div>
    <div class="w-full flex justify-around">
      <canvas id="line3" width="200" height="200" class="rounded-lg m-1"
      ></canvas>
      <canvas id="line4" width="200" height="200" class="rounded-lg m-1"
      ></canvas>
    </div>
  </div>
</div>

<div class="flex justify-center">
  <div
    class="bg-gray-100 pt-2 p-5 m-1 h-auto w-1/2 rounded-md flex flex-wrap justify-around"
  >
    <div class="w-full flex justify-around">
      <canvas id="area" width="600" height="300" class="rounded-lg m-1"
      ></canvas>
    </div>
  </div>
  <div
    class="bg-gray-100 mt-5 ml-10 pt-2 p-5 mb-10 h-auto w-1/3 rounded-md flex flex-wrap justify-around"
  >
    <div class="w-full flex justify-around">
      <canvas
        id="donut"
        width="500"
        height="300"
        class="rounded-lg mt-5 ml-2 mr-2"></canvas>
    </div>
  </div>
</div>

<script
  src="https://www.steema.com/files/public/teechart/html5/latest/src/teechart.js"
  type="text/javascript"></script>

<script type="text/javascript">
  async function fetchData(url) {
    try {
      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      if (!response.ok) {
        throw new Error(`Error fetching data: ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error(error);
      return null;
    }
  }

  async function loadData() {
    const data = [
      { id: "donut", type: "donut", data: JSON.stringify([25, 35, 40]) },
      {
        id: "line1",
        type: "line",
        data: JSON.stringify([738, 812, 712, 921, 604, 800, 1024, 1203, 1100]),
      },
      {
        id: "line2",
        type: "line",
        data: JSON.stringify([
          238, 612, 512, 221, 1004, 1220, 1524, 1003, 1100,
        ]),
      },
      {
        id: "line3",
        type: "line",
        data: JSON.stringify([
          2042, 1994, 1801, 1730, 1601, 1498, 1339, 1245, 1004,
        ]),
      },
      {
        id: "line4",
        type: "line",
        data: JSON.stringify([100, 79, 78, 27, 106, 115, 94, 93, 99]),
      },
      {
        id: "area",
        type: "area",
        data: JSON.stringify([4562, 2562, 1262, 1000]),
      },
      {
        id: "bar",
        type: "bar",
        data: JSON.stringify([205, 190, 195, 380, 300, 105, 100]),
      },
    ];

    try {
      for (let chart of data) {
        await fetch("/api/data/insertData", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(chart),
        });
      }
    } catch (error) {
      console.error("Error inserting chart data:", error);
    }
  }

  async function drawDonut(chartData) {
    const donutChartData = chartData.find((data) => data.id === "donut");
    if (donutChartData) {
      const donutChart = new Tee.Chart("donut");
      const series = new Tee.Donut();
      donutChart.addSeries(series);
      series.data.values = JSON.parse(donutChartData.data);
      donutChart.series.items[0].explode = [0, 30, 0, 0, 0];
      series.rotation = -30;
      series.data.labels = ["Clothing", "Body Fit", "Sportswear"];
      donutChart.title.text = "Sales by category";
      series.marks.visible = false;
      const tooltip = new Tee.ToolTip(donutChart);
      tooltip.autoHide = true;
      tooltip.delay = 1000;
      tooltip.animated = 200;
      tooltip.findPoint = true;
      donutChart.tools.add(tooltip);
      donutChart.applyTheme("minimal");
      donutChart.legend.visible = true;
      donutChart.legend.position = "right";
      donutChart.legend.format.font.fill = "black";
      donutChart.legend.format.font.size = 14;
      donutChart.draw();
    }
  }

  async function drawLine(chartData) {
    const charts = ["line1", "line2", "line3", "line4"];
    const labels = [
      "Total Revenue",
      "Total Visitors",
      "Total Transactions",
      "Total Products",
    ];
    for (let i = 0; i < charts.length; i++) {
      const lineChartData = chartData.find((data) => data.id === charts[i]);
      if (lineChartData) {
        const lineChart = new Tee.Chart(charts[i]);
        const series = new Tee.Line();
        lineChart.addSeries(series);
        series.data.values = JSON.parse(lineChartData.data);
        lineChart.legend.visible = false;
        lineChart.axes.visible = false;
        lineChart.applyTheme("minimal");
        lineChart.title.text = labels[i % 4];
        lineChart.footer.format.font.fill = "black";
        lineChart.title.format.size = 5;
        series.format.stroke.fill = i === 2 ? "red" : "green";
        lineChart.footer.text =
          i === 2
            ? "-2% vs preview 28 days"
            : i % 3 == 0
              ? "3% vs preview 28 days"
              : "1% vs preview 28 days";
        series.format.stroke.size = 2;
        lineChart.draw();
      }
    }
  }

  async function draw() {
    const chartData = await fetchData("/api/data/getData");
    if (!chartData) return;
    const barChartData = chartData.find((data) => data.type === "bar");
    if (barChartData) {
      const barChart = new Tee.Chart("bar");
      const series = new Tee.Bar();
      barChart.addSeries(series);
      series.data.values = JSON.parse(barChartData.data);
      const daysOfWeek = [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday",
      ];
      barChart.title.text = "Total Sales";
      barChart.title.format.fill = "black";
      barChart.title.format.align = "left";
      barChart.title.format.size = 20;
      barChart.legend.visible = false;
      for (let i = 0; i < series.data.values.length; i++) {
        series.data.labels[i] = daysOfWeek[i % 7];
      }
      series.colorEach = false;
      barChart.applyTheme("minimal");
      series.format.fill = "blue";
      series.format.gradient = false;
      series.marks.visible = false;
      const tooltip = new Tee.ToolTip(barChart);
      tooltip.autoHide = true;
      tooltip.delay = 1000;
      tooltip.animated = 200;
      tooltip.findPoint = true;
      barChart.tools.add(tooltip);
      barChart.draw();
    }
  }

  async function drawArea(chartData) {
    const areaChartData = chartData.find((data) => data.type === "area");
    if (areaChartData) {
      const areaChart = new Tee.Chart("area");
      const series = new Tee.Area();
      areaChart.addSeries(series);
      series.data.values = JSON.parse(areaChartData.data);
      areaChart.title.text = "Sales Funnel";
      areaChart.title.format.fill = "black";
      areaChart.title.format.align = "left";
      areaChart.title.format.size = 20;
      areaChart.legend.visible = true;
      areaChart.legend.transparent = true;
      areaChart.legend.position = "top";
      areaChart.applyTheme("minimal");
      series.format.fill = "blue";
      series.smooth = true;
      areaChart.draw();
    }
  }

  async function initializePage() {
    let chartData = await fetchData("/api/data/getData");
    if (!chartData || chartData.length === 0) {
      await loadData();
      chartData = await fetchData("/api/data/getData");
    }
    if (chartData) {
      draw();
      drawArea(chartData);
      drawLine(chartData);
      drawDonut(chartData);
    }
  }
</script>
